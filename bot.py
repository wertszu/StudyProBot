import os
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, ConversationHandler
)
from dotenv import load_dotenv
from sqlalchemy import text
from functools import lru_cache

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
logger.info(f"ADMIN_ID from env: {os.getenv('ADMIN_ID')}")
logger.info(f"TELEGRAM_TOKEN from env: {os.getenv('TELEGRAM_TOKEN')}")

# –ú–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from database import init_db, Order, OrderStatus, User, Message, Review, Payment, PaymentStatus
from states import (
    WAITING_WORK_TYPE,
    WAITING_SUBJECT,
    WAITING_VOLUME,
    WAITING_DEADLINE,
    WAITING_FILE,
    WAITING_COMMENT,
    WAITING_CONTACT,
    WAITING_BROADCAST,
    WAITING_REVIEW_RESPONSE,
    WAITING_USER_MESSAGE,
    WAITING_PRICE,
    WAITING_PAYMENT_PROOF
)
from admin import (
    admin_panel, admin_stats, admin_new_orders, admin_accept_order,
    admin_reject_order, admin_broadcast, handle_broadcast,
    admin_reviews, admin_review_response, handle_review_response,
    admin_messages, admin_message_response, handle_user_message,
    handle_price_setting
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BASE_PRICES = {
    'coursework': 1000,
    'essay': 500,
    'control': 700,
    'translation': 150,
    'presentation': 300,
    'diploma': 3000,
    'tasks': 400
}

# –ö—ç—à–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã
@lru_cache(maxsize=128)
def get_base_price(work_type: str) -> float:
    return BASE_PRICES.get(work_type, 0)

class OrderState:
    def __init__(self):
        self.work_type = None
        self.subject = None
        self.volume = None
        self.deadline = None
        self.file_path = None
        self.comment = None
        self.contact_info = None

    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
        return all([
            self.work_type,
            self.subject,
            self.volume,
            self.deadline,
            self.contact_info
        ])

def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='create_order')],
        [InlineKeyboardButton("üí∞ –¶–µ–Ω—ã", callback_data='price')],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='orders')],
        [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
        [InlineKeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã", callback_data='reviews')]
    ])

def get_cancel_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã."""
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]])

async def choose_work_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle work type selection."""
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
        if update.callback_query:
            await update.callback_query.answer()
            message = update.callback_query.message
        else:
            message = update.message

        keyboard = [
            [
                InlineKeyboardButton("üìö –ö—É—Ä—Å–æ–≤–∞—è", callback_data='work_type_coursework'),
                InlineKeyboardButton("üìù –†–µ—Ñ–µ—Ä–∞—Ç", callback_data='work_type_essay')
            ],
            [
                InlineKeyboardButton("üìê –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è", callback_data='work_type_control'),
                InlineKeyboardButton("üí° –ü–µ—Ä–µ–≤–æ–¥", callback_data='work_type_translation')
            ],
            [
                InlineKeyboardButton("üéì –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", callback_data='work_type_presentation'),
                InlineKeyboardButton("üë®‚Äçüè´ –î–∏–ø–ª–æ–º", callback_data='work_type_diploma')
            ],
            [InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data='work_type_tasks')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ]
        
        if update.callback_query:
            await message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        return WAITING_WORK_TYPE
        
    except Exception as e:
        logger.error(f"Error in choose_work_type: {str(e)}", exc_info=True)
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if update.callback_query:
            await update.callback_query.message.reply_text(error_message)
        else:
            await update.message.reply_text(error_message)
        return ConversationHandler.END

async def handle_work_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle work type selection."""
    try:
        query = update.callback_query
        await query.answer()
        
        work_type = query.data.replace('work_type_', '')
        context.user_data['order_state'] = OrderState()
        context.user_data['order_state'].work_type = work_type
        
        message = (
            f"üìö {work_type.capitalize()}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
            "1. –ü—Ä–µ–¥–º–µ—Ç/–¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É\n"
            "2. –¢–µ–º—É —Ä–∞–±–æ—Ç—ã\n"
            "3. –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "–ü—Ä–µ–¥–º–µ—Ç: –≠–∫–æ–Ω–æ–º–∏–∫–∞\n"
            "–¢–µ–º–∞: –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤..."
        )
        
        await query.message.edit_text(
            message,
            reply_markup=get_cancel_keyboard()
        )
        
        return WAITING_SUBJECT
        
    except Exception as e:
        logger.error(f"Error in handle_work_type: {str(e)}", exc_info=True)
        await update.callback_query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard()
        )
        return ConversationHandler.END

async def handle_subject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle subject input."""
    try:
        if 'order_state' not in context.user_data:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_cancel_keyboard()
            )
            return ConversationHandler.END
        
        subject = update.message.text.strip()
        if len(subject) < 3:
            await update.message.reply_text(
                "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ:",
                reply_markup=get_cancel_keyboard()
            )
            return WAITING_SUBJECT
        
        context.user_data['order_state'].subject = subject
        
        work_type = context.user_data['order_state'].work_type
        volume_message = {
            'coursework': "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–æ–±—ã—á–Ω–æ 25-35):",
            'essay': "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–æ–±—ã—á–Ω–æ 10-15):",
            'control': "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á:",
            'translation': "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü:",
            'presentation': "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤:",
            'diploma': "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–æ–±—ã—á–Ω–æ 60-80):",
            'tasks': "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á:"
        }.get(work_type, "–£–∫–∞–∂–∏—Ç–µ –æ–±—ä—ë–º —Ä–∞–±–æ—Ç—ã:")
        
        await update.message.reply_text(
            volume_message,
            reply_markup=get_cancel_keyboard()
        )
        
        return WAITING_VOLUME
        
    except Exception as e:
        logger.error(f"Error in handle_subject: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_cancel_keyboard()
        )
        return ConversationHandler.END

async def handle_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle volume input."""
    if 'order_state' not in context.user_data:
        context.user_data['order_state'] = OrderState()
    
    volume = update.message.text.strip()
    if not volume.replace('.', '').isdigit():
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        return WAITING_VOLUME
    
    context.user_data['order_state'].volume = volume
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2025):",
        reply_markup=get_cancel_keyboard()
    )
    return WAITING_DEADLINE

async def handle_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle deadline input."""
    if 'order_state' not in context.user_data:
        context.user_data['order_state'] = OrderState()
    
    try:
        deadline = datetime.strptime(update.message.text.strip(), "%d.%m.%Y")
        
        if deadline < datetime.now():
            await update.message.reply_text(
                "‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É:",
                reply_markup=get_cancel_keyboard()
            )
            return WAITING_DEADLINE
        
        max_deadline = datetime.now() + timedelta(days=365)
        if deadline > max_deadline:
            await update.message.reply_text(
                "‚ùå –°–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–∏–π –¥–µ–¥–ª–∞–π–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ–¥–∞:",
                reply_markup=get_cancel_keyboard()
            )
            return WAITING_DEADLINE
        
        context.user_data['order_state'].deadline = deadline
        
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ç–æ, PDF, DOCX):",
            reply_markup=get_cancel_keyboard()
        )
        return WAITING_FILE
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:",
            reply_markup=get_cancel_keyboard()
        )
        return WAITING_DEADLINE

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle file upload."""
    logger.info("handle_file called")
    
    if 'order_state' not in context.user_data:
        logger.info("Creating new order state")
        context.user_data['order_state'] = OrderState()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–æ—Ç–æ
        if update.message.document:
            logger.info(f"Received document: {update.message.document.file_name}")
            file = update.message.document
            file_ext = file.file_name.split('.')[-1].lower()
            if file_ext not in ['pdf', 'docx', 'doc']:
                await update.message.reply_text(
                    "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã PDF –∏ DOCX. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
                    reply_markup=get_cancel_keyboard()
                )
                return WAITING_FILE
        elif update.message.photo:
            logger.info("Received photo")
            file = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        else:
            logger.info("No file or photo received")
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (PDF, DOCX) –∏–ª–∏ —Ñ–æ—Ç–æ.",
                reply_markup=get_cancel_keyboard()
            )
            return WAITING_FILE

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        files_dir = os.path.join(os.getcwd(), 'files')
        if not os.path.exists(files_dir):
            logger.info(f"Creating directory: {files_dir}")
            try:
                os.makedirs(files_dir)
            except Exception as e:
                logger.error(f"Error creating directory: {str(e)}")
                raise

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_id = file.file_id
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        if update.message.document:
            file_name = f"{timestamp}_{file_id}_{file.file_name}"
        else:
            file_name = f"{timestamp}_{file_id}.jpg"
        
        file_path = os.path.join(files_dir, file_name)
        logger.info(f"Attempting to save file to: {file_path}")

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = await context.bot.get_file(file_id)
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file_info.download_to_drive(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
            if not os.path.exists(file_path):
                raise Exception("File was not created after download")
                
            logger.info(f"File successfully saved to: {file_path}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            context.user_data['order_state'].file_path = file_path
            
            await update.message.reply_text(
                "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç):",
                reply_markup=get_cancel_keyboard()
            )
            return WAITING_COMMENT
            
        except Exception as e:
            logger.error(f"Error downloading file: {str(e)}")
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except:
                    pass
            raise
        
    except Exception as e:
        logger.error(f"Error handling file: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return WAITING_FILE

async def handle_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle comment input."""
    if 'order_state' not in context.user_data:
        context.user_data['order_state'] = OrderState()
    
    comment = update.message.text.strip()
    if comment == '-':
        comment = None
    
    context.user_data['order_state'].comment = comment
    
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email):",
        reply_markup=get_cancel_keyboard()
    )
    return WAITING_CONTACT

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle contact info and finalize order."""
    if 'order_state' not in context.user_data:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=get_cancel_keyboard()
        )
        return ConversationHandler.END
    
    order_state = context.user_data['order_state']
    order_state.contact_info = update.message.text.strip()
    
    if not order_state.is_valid():
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.",
            reply_markup=get_cancel_keyboard()
        )
        return ConversationHandler.END
    
    session = context.bot_data['db_session']
    
    try:
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        if not user:
            user = User(
                telegram_id=update.effective_user.id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name
            )
            session.add(user)
            session.commit()
        
        order = Order(
            user_id=user.id,
            work_type=order_state.work_type,
            subject=order_state.subject,
            volume=order_state.volume,
            deadline=order_state.deadline,
            status=OrderStatus.PENDING,
            price=get_base_price(order_state.work_type),
            file_path=order_state.file_path,
            comment=order_state.comment,
            contact_info=order_state.contact_info
        )
        
        session.add(order)
        session.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üìö –¢–∏–ø: {order.work_type}\n"
            f"üìù –ü—Ä–µ–¥–º–µ—Ç: {order.subject}\n"
            f"üìä –û–±—ä—ë–º: {order.volume}\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {order.deadline.strftime('%d.%m.%Y')}\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à –∑–∞–∫–∞–∑ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å."
        )
        
        admin_message = (
            f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}\n"
            f"üë§ –û—Ç: {user.first_name}\n"
            f"üìö –¢–∏–ø: {order.work_type}\n"
            f"üìù –ü—Ä–µ–¥–º–µ—Ç: {order.subject}\n"
            f"üìä –û–±—ä—ë–º: {order.volume}\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {order.deadline.strftime('%d.%m.%Y')}\n"
            f"üí∞ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {order.price} ‚ÇΩ\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {order.contact_info}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment or '–ù–µ—Ç'}"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'admin_accept_{order.id}'),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'admin_reject_{order.id}')
            ],
            [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f'admin_message_{order.id}')]
        ]
        
        await context.bot.send_message(
            chat_id=context.bot_data['admin_id'],
            text=admin_message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        del context.user_data['order_state']
        
    except Exception as e:
        logger.error(f"Error creating order: {str(e)}", exc_info=True)
        session.rollback()
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    return ConversationHandler.END

async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel order creation."""
    query = update.callback_query
    await query.answer()
    
    if 'order_state' in context.user_data:
        if context.user_data['order_state'].file_path and os.path.exists(context.user_data['order_state'].file_path):
            try:
                os.remove(context.user_data['order_state'].file_path)
            except Exception as e:
                logger.error(f"Error deleting file: {str(e)}", exc_info=True)
        
        del context.user_data['order_state']
    
    await query.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
        ]])
    )
    return ConversationHandler.END

# ===== –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command."""
    try:
        text = (
            '–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Å:\n'
            'üìö –ö—É—Ä—Å–æ–≤—ã–º–∏\nüìù –†–µ—Ñ–µ—Ä–∞—Ç–∞–º–∏\nüìê –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏\n'
            'üí° –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏\nüéì –î–∏–ø–ª–æ–º–∞–º–∏\nüë®‚Äçüè´ –ó–∞–¥–∞—á–∞–º–∏\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:'
        )
        
        if update.message:
            await update.message.reply_text(text, reply_markup=get_main_keyboard())
        else:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(text, reply_markup=get_main_keyboard())
            
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}", exc_info=True)
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if update.message:
            await update.message.reply_text(error_message)
        else:
            await update.callback_query.message.reply_text(error_message)

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show price list."""
    try:
        await update.callback_query.answer()
        text = (
            'üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:\n'
            '‚Äî –ö—É—Ä—Å–æ–≤–∞—è: –æ—Ç 1000 ‚ÇΩ\n'
            '‚Äî –†–µ—Ñ–µ—Ä–∞—Ç: –æ—Ç 500 ‚ÇΩ\n'
            '‚Äî –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è: –æ—Ç 700 ‚ÇΩ\n'
            '‚Äî –ü–µ—Ä–µ–≤–æ–¥: –æ—Ç 150 ‚ÇΩ/1800 –∑–Ω–∞–∫–æ–≤\n'
            '‚Äî –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: –æ—Ç 300 ‚ÇΩ\n'
            '‚Äî –î–∏–ø–ª–æ–º–Ω–∞—è: –æ—Ç 3000 ‚ÇΩ\n\n'
            '*–¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ä–æ–∫–∞, —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä—ë–º–∞*'
        )
        keyboard = [[InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]]
        reply = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(text, parse_mode='Markdown', reply_markup=reply)
        
    except Exception as e:
        logger.error(f"Error in price command: {str(e)}", exc_info=True)
        await update.callback_query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

async def orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show user's orders."""
    try:
        session = context.bot_data['db_session']
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        await update.callback_query.answer()
        
        keyboard = [[InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]]
        reply = InlineKeyboardMarkup(keyboard)
        
        if not user:
            return await update.callback_query.message.edit_text(
                '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.',
                reply_markup=reply
            )
            
        orders = session.query(Order).filter_by(user_id=user.id).all()
        if not orders:
            return await update.callback_query.message.edit_text(
                '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.',
                reply_markup=reply
            )
            
        text = 'üì• –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n'
        for o in orders:
            emoji = {
                OrderStatus.PENDING: '‚è≥',
                OrderStatus.PAID: 'üí∞',
                OrderStatus.IN_PROGRESS: 'üîÑ',
                OrderStatus.COMPLETED: '‚úÖ',
                OrderStatus.CANCELLED: '‚ùå'
            }.get(o.status, '‚ùì')
            text += f"{emoji} –ó–∞–∫–∞–∑ #{o.id}\n–¢–∏–ø: {o.work_type}\n–¶–µ–Ω–∞: {o.price} ‚ÇΩ\n\n"
            
        await update.callback_query.message.edit_text(text, reply_markup=reply)
        
    except Exception as e:
        logger.error(f"Error in orders command: {str(e)}", exc_info=True)
        await update.callback_query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle support request."""
    try:
        await update.callback_query.answer()
        keyboard = [[InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]]
        reply = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(
            'üìû –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15‚Äì60 –º–∏–Ω—É—Ç.\n–ü–æ —Å—Ä–æ—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º: @nocent_k  @wertszus',
            reply_markup=reply
        )
        context.user_data['waiting_for_support'] = True
        return WAITING_USER_MESSAGE
        
    except Exception as e:
        logger.error(f"Error in support command: {str(e)}", exc_info=True)
        await update.callback_query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

async def reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show reviews."""
    try:
        session = context.bot_data['db_session']
        recent = session.query(Review).order_by(Review.created_at.desc()).limit(5).all()
        await update.callback_query.answer()
        
        keyboard = [[InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]]
        reply = InlineKeyboardMarkup(keyboard)
        
        text = 'üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n'
        for r in recent:
            u = session.query(User).filter_by(id=r.user_id).first()
            text += f"\"{r.text}\"\n‚Äî {u.first_name if u else '-'}\n\n"
        text += '–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤? –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç.'
        
        await update.callback_query.message.edit_text(text, reply_markup=reply)
        return 'waiting_review'
        
    except Exception as e:
        logger.error(f"Error in reviews command: {str(e)}", exc_info=True)
        await update.callback_query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle back button."""
    try:
        await update.callback_query.answer()
        text = (
            '–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Å:\n'
            'üìö –ö—É—Ä—Å–æ–≤—ã–º–∏\nüìù –†–µ—Ñ–µ—Ä–∞—Ç–∞–º–∏\nüìê –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏\n'
            'üí° –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏\nüéì –î–∏–ø–ª–æ–º–∞–º–∏\nüë®‚Äçüè´ –ó–∞–¥–∞—á–∞–º–∏\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ:'
        )
        await update.callback_query.message.edit_text(text, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"Error in go_back: {str(e)}", exc_info=True)
        await update.callback_query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

async def handle_support_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle support messages from users."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if update.effective_user.id == context.bot_data['admin_id']:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        # –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–Ω—É
        if 'order_state' in context.user_data or context.user_data.get('current_order_id'):
            return
        
        session = context.bot_data['db_session']
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        if not user:
            user = User(
                telegram_id=update.effective_user.id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name
            )
            session.add(user)
            session.commit()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        msg = Message(
            user_id=user.id,
            text=update.message.text,
            is_read=False
        )
        session.add(msg)
        session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = (
            f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (@{user.username}):\n\n"
            f"{update.message.text}"
        )
        keyboard = [[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'message_user_{user.id}')]]
        await context.bot.send_message(
            chat_id=context.bot_data['admin_id'],
            text=admin_message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        await update.message.reply_text('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
        
    except Exception as e:
        logger.error(f"Error in handle_support_message: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def handle_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user review."""
    try:
        session = context.bot_data['db_session']
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        if not user:
            user = User(
                telegram_id=update.effective_user.id,
                username=update.effective_user.username,
                first_name=update.effective_user.first_name
            )
            session.add(user)
            session.commit()
            
        rev = Review(
            user_id=user.id,
            text=update.message.text
        )
        session.add(rev)
        session.commit()
        
        await update.message.reply_text('–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.')
        
    except Exception as e:
        logger.error(f"Error in handle_review: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command."""
    try:
        text = (
            "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
            "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:*\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏ —Ç–µ–º—É\n"
            "4. –£–∫–∞–∂–∏—Ç–µ –æ–±—ä—ë–º\n"
            "5. –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω\n"
            "6. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º\n"
            "7. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n"
            "8. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
            "üí∞ *–¶–µ–Ω—ã:*\n"
            "‚Äî –ö—É—Ä—Å–æ–≤–∞—è: –æ—Ç 1000 ‚ÇΩ\n"
            "‚Äî –†–µ—Ñ–µ—Ä–∞—Ç: –æ—Ç 500 ‚ÇΩ\n"
            "‚Äî –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è: –æ—Ç 700 ‚ÇΩ\n"
            "‚Äî –ü–µ—Ä–µ–≤–æ–¥: –æ—Ç 150 ‚ÇΩ/1800 –∑–Ω–∞–∫–æ–≤\n"
            "‚Äî –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: –æ—Ç 300 ‚ÇΩ\n"
            "‚Äî –î–∏–ø–ª–æ–º–Ω–∞—è: –æ—Ç 3000 ‚ÇΩ\n\n"
            "üí¨ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'"
        )
        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error(f"Error in help_command: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

async def create_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start order creation process."""
    try:
        await update.callback_query.answer()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        context.user_data['order_state'] = OrderState()
        
        keyboard = [
            [
                InlineKeyboardButton("üìö –ö—É—Ä—Å–æ–≤–∞—è", callback_data='work_type_coursework'),
                InlineKeyboardButton("üìù –†–µ—Ñ–µ—Ä–∞—Ç", callback_data='work_type_essay')
            ],
            [
                InlineKeyboardButton("üìê –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è", callback_data='work_type_control'),
                InlineKeyboardButton("üí° –ü–µ—Ä–µ–≤–æ–¥", callback_data='work_type_translation')
            ],
            [
                InlineKeyboardButton("üéì –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", callback_data='work_type_presentation'),
                InlineKeyboardButton("üë®‚Äçüè´ –î–∏–ø–ª–æ–º", callback_data='work_type_diploma')
            ],
            [InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data='work_type_tasks')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
        ]
        
        await update.callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return WAITING_WORK_TYPE
        
    except Exception as e:
        logger.error(f"Error in create_order: {str(e)}", exc_info=True)
        await update.callback_query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel current operation."""
    try:
        if update.message:
            await update.message.reply_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_keyboard()
            )
        else:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_keyboard()
            )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in cancel: {str(e)}", exc_info=True)
        if update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
        else:
            await update.callback_query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
        return ConversationHandler.END

async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle payment button click."""
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
        order_id = int(query.data.split('_')[1])
        session = context.bot_data['db_session']
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order = session.query(Order).filter_by(id=order_id).first()
        if not order:
            await query.message.edit_text(
                "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        if not user or order.user_id != user.id:
            await query.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        if order.status != OrderStatus.PENDING:
            await query.message.edit_text(
                "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = Payment(
            user_id=user.id,
            order_id=order.id,
            amount=order.price,
            status=PaymentStatus.PENDING
        )
        session.add(payment)
        session.commit()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['current_payment_order_id'] = order.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
        payment_message = (
            f"üí∞ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id}\n\n"
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {order.price} ‚ÇΩ\n\n"
            "–î–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {order.price} ‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n"
            "üí≥ 2202 2050 0031 5959\n\n"
            "2. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞/–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ"
        )
        
        keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]]
        await query.message.edit_text(
            payment_message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return WAITING_PAYMENT_PROOF
        
    except Exception as e:
        logger.error(f"Error in handle_payment: {str(e)}", exc_info=True)
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

async def handle_payment_proof(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle payment proof upload."""
    try:
        if 'current_payment_order_id' not in context.user_data:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂.",
                reply_markup=get_main_keyboard()
            )
            return ConversationHandler.END
        
        order_id = context.user_data['current_payment_order_id']
        session = context.bot_data['db_session']
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        order = session.query(Order).filter_by(id=order_id).first()
        user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
        
        if not order or not user or order.user_id != user.id:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.",
                reply_markup=get_main_keyboard()
            )
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–æ—Ç–æ
        if update.message.photo:
            file = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        elif update.message.document:
            file = update.message.document
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–∞–π–ª —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç—ã.",
                reply_markup=get_cancel_keyboard()
            )
            return WAITING_PAYMENT_PROOF
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤ –æ–ø–ª–∞—Ç—ã
        payments_dir = os.path.join(os.getcwd(), 'payment_proofs')
        if not os.path.exists(payments_dir):
            os.makedirs(payments_dir)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        file_id = file.file_id
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        if update.message.document:
            file_name = f"{timestamp}_{file_id}_{file.file_name}"
        else:
            file_name = f"{timestamp}_{file_id}.jpg"
        
        file_path = os.path.join(payments_dir, file_name)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await context.bot.get_file(file_id)
        await file_info.download_to_drive(file_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment = session.query(Payment).filter_by(order_id=order.id).first()
        if payment:
            payment.proof_file = file_path
            session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω–æ!\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = (
            f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –∑–∞–∫–∞–∑ #{order.id}\n"
            f"üë§ –û—Ç: {user.first_name}\n"
            f"üíµ –°—É–º–º–∞: {order.price} ‚ÇΩ"
        )
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'admin_confirm_payment_{order.id}'),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'admin_reject_payment_{order.id}')
            ]
        ]
        await context.bot.send_photo(
            chat_id=context.bot_data['admin_id'],
            photo=file_path,
            caption=admin_message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        del context.user_data['current_payment_order_id']
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"Error in handle_payment_proof: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END

async def admin_confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin payment confirmation."""
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
        order_id = int(query.data.split('_')[3])
        session = context.bot_data['db_session']
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order = session.query(Order).filter_by(id=order_id).first()
        if not order:
            await query.message.edit_text(
                "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –ø–ª–∞—Ç–µ–∂–∞
        order.status = OrderStatus.PAID
        payment = session.query(Payment).filter_by(order_id=order.id).first()
        if payment:
            payment.status = PaymentStatus.COMPLETED
        session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(id=order.user_id).first()
        if user:
            await context.bot.send_message(
                chat_id=user.telegram_id,
                text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n–ú—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.",
                reply_markup=get_main_keyboard()
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await query.message.edit_caption(
            caption=f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            reply_markup=None
        )
        
    except Exception as e:
        logger.error(f"Error in admin_confirm_payment: {str(e)}", exc_info=True)
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

async def admin_reject_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle admin payment rejection."""
    try:
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
        order_id = int(query.data.split('_')[3])
        session = context.bot_data['db_session']
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order = session.query(Order).filter_by(id=order_id).first()
        if not order:
            await query.message.edit_text(
                "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment = session.query(Payment).filter_by(order_id=order.id).first()
        if payment:
            payment.status = PaymentStatus.REJECTED
        session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(id=order.user_id).first()
        if user:
            await context.bot.send_message(
                chat_id=user.telegram_id,
                text=f"‚ùå –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_keyboard()
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await query.message.edit_caption(
            caption=f"‚ùå –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            reply_markup=None
        )
        
    except Exception as e:
        logger.error(f"Error in admin_reject_payment: {str(e)}", exc_info=True)
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )

def main():
    """Start the bot."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_session = init_db()
        logger.info("Database initialized successfully")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ bot_data
        application.bot_data['admin_id'] = int(os.getenv('ADMIN_ID'))
        application.bot_data['db_session'] = db_session
        
        # Command handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        
        # Order conversation handler
        order_conv = ConversationHandler(
            entry_points=[CallbackQueryHandler(create_order, pattern='^create_order$')],
            states={
                WAITING_WORK_TYPE: [
                    CallbackQueryHandler(handle_work_type, pattern='^work_type_'),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_work_type)
                ],
                WAITING_SUBJECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_subject)],
                WAITING_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_volume)],
                WAITING_DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_deadline)],
                WAITING_FILE: [
                    MessageHandler(filters.Document.ALL | filters.PHOTO, handle_file),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_file)
                ],
                WAITING_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)],
                WAITING_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact)]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
        )
        application.add_handler(order_conv)
        logger.info("Order conversation handler added to application")
        
        # Callback query handlers –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        application.add_handler(CallbackQueryHandler(price, pattern='^price$'))
        application.add_handler(CallbackQueryHandler(orders, pattern='^orders$'))
        application.add_handler(CallbackQueryHandler(support, pattern='^support$'))
        application.add_handler(CallbackQueryHandler(reviews, pattern='^reviews$'))
        application.add_handler(CallbackQueryHandler(go_back, pattern='^back$'))
        
        # Admin handlers
        admin_conv = ConversationHandler(
            entry_points=[
                CommandHandler("admin", admin_panel),
                CallbackQueryHandler(admin_accept_order, pattern='^admin_accept_')
            ],
            states={
                WAITING_BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_broadcast)],
                WAITING_REVIEW_RESPONSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_review_response)],
                WAITING_USER_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message)],
                WAITING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price_setting)]
            },
            fallbacks=[CommandHandler("admin", admin_panel)]
        )
        application.add_handler(admin_conv)
        
        # Admin callback handlers
        application.add_handler(CallbackQueryHandler(admin_stats, pattern='^admin_stats$'))
        application.add_handler(CallbackQueryHandler(admin_new_orders, pattern='^admin_new_orders$'))
        application.add_handler(CallbackQueryHandler(admin_reject_order, pattern='^admin_reject_'))
        application.add_handler(CallbackQueryHandler(admin_broadcast, pattern='^admin_broadcast$'))
        application.add_handler(CallbackQueryHandler(admin_reviews, pattern='^admin_reviews$'))
        application.add_handler(CallbackQueryHandler(admin_review_response, pattern='^admin_review_response_'))
        application.add_handler(CallbackQueryHandler(admin_messages, pattern='^admin_messages$'))
        application.add_handler(CallbackQueryHandler(admin_message_response, pattern='^admin_message_response_'))
        
        # Payment handlers
        application.add_handler(CallbackQueryHandler(handle_payment, pattern='^pay_'))
        application.add_handler(MessageHandler(
            filters.PHOTO | filters.Document.ALL,
            handle_payment_proof
        ))
        application.add_handler(CallbackQueryHandler(admin_confirm_payment, pattern='^admin_confirm_payment_'))
        application.add_handler(CallbackQueryHandler(admin_reject_payment, pattern='^admin_reject_payment_'))
        
        # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_support_message,
            block=False
        ))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting bot...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"Error in main: {str(e)}", exc_info=True)
    finally:
        db_session.close()

if __name__ == '__main__':
    main()
