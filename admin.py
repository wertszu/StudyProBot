from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import Order, OrderStatus, User, Payment, PaymentStatus, Message, Review
from datetime import datetime, timedelta
from sqlalchemy import func
import logging
from states import (
    WAITING_BROADCAST,
    WAITING_REVIEW_RESPONSE,
    WAITING_USER_MESSAGE,
    WAITING_PRICE
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ORDER_STATUS_MESSAGES = {
    OrderStatus.PENDING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
    OrderStatus.PAID: "üí∞ –û–ø–ª–∞—á–µ–Ω",
    OrderStatus.IN_PROGRESS: "‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ",
    OrderStatus.COMPLETED: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω",
    OrderStatus.CANCELLED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω"
}

def get_admin_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data='admin_new_orders')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast')],
        [InlineKeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã", callback_data='admin_reviews')],
        [InlineKeyboardButton("üì® –°–æ–æ–±—â–µ–Ω–∏—è", callback_data='admin_messages')]
    ])

def get_order_keyboard(order_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º."""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'admin_accept_{order_id}'),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'admin_reject_{order_id}')
        ],
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f'admin_message_{order_id}')]
    ])

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show admin panel."""
    if update.effective_user.id != context.bot_data['admin_id']:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    return ConversationHandler.END

async def admin_new_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show new orders."""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != context.bot_data['admin_id']:
        await query.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    session = context.bot_data['db_session']
    new_orders = session.query(Order).filter_by(status=OrderStatus.PENDING).all()
    
    logger.info(f"Found {len(new_orders)} new orders")
    
    if not new_orders:
        await query.message.reply_text(
            "üì≠ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.",
            reply_markup=get_admin_keyboard()
        )
        return ConversationHandler.END
    
    for order in new_orders:
        user = session.query(User).filter_by(id=order.user_id).first()
        logger.info(f"Processing order #{order.id} for user {user.telegram_id if user else 'Unknown'}")
        
        if not user:
            logger.error(f"User not found for order #{order.id}")
            continue
            
        message = (
            f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}\n"
            f"üë§ –û—Ç: {user.first_name}\n"
            f"üìö –¢–∏–ø: {order.work_type}\n"
            f"üìù –ü—Ä–µ–¥–º–µ—Ç: {order.subject}\n"
            f"üìä –û–±—ä—ë–º: {order.volume}\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {order.deadline.strftime('%d.%m.%Y')}\n"
            f"üí∞ –¶–µ–Ω–∞: {order.price} ‚ÇΩ\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {order.contact_info}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment or '–ù–µ—Ç'}"
        )
        
        await query.message.reply_text(
            message,
            reply_markup=get_order_keyboard(order.id)
        )
    
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    return ConversationHandler.END

async def admin_accept_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Accept order and set price."""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != context.bot_data['admin_id']:
        await query.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    order_id = int(query.data.split('_')[2])
    session = context.bot_data['db_session']
    
    try:
        logger.info(f"Accepting order #{order_id}")
        
        order = session.query(Order).filter_by(id=order_id).first()
        if not order:
            logger.error(f"Order #{order_id} not found")
            await query.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END
        
        # Store order_id in context for price setting
        context.user_data['current_order_id'] = order_id
        logger.info(f"Stored order #{order_id} in context for price setting")
        
        await query.message.reply_text(
            f"üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} (–≤ —Ä—É–±–ª—è—Ö):"
        )
        return WAITING_PRICE
        
    except Exception as e:
        logger.error(f"Error accepting order: {str(e)}", exc_info=True)
        session.rollback()
        await query.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞.\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_admin_keyboard()
        )
    
    return ConversationHandler.END

async def handle_price_setting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle price setting by admin."""
    if update.effective_user.id != context.bot_data['admin_id']:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    if 'current_order_id' not in context.user_data:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
        return ConversationHandler.END
    
    try:
        price = float(update.message.text)
        if price <= 0:
            await update.message.reply_text(
                "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return WAITING_PRICE
        
        order_id = context.user_data['current_order_id']
        session = context.bot_data['db_session']
        
        logger.info(f"Setting price for order #{order_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order = session.query(Order).filter_by(id=order_id).first()
        if not order:
            logger.error(f"Order #{order_id} not found")
            await update.message.reply_text(
                "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_keyboard()
            )
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(id=order.user_id).first()
        if not user:
            logger.error(f"User not found for order #{order_id}")
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_keyboard()
            )
            return ConversationHandler.END
        
        logger.info(f"Found user: {user.telegram_id} for order #{order_id}")
        logger.info(f"User details - ID: {user.id}, Telegram ID: {user.telegram_id}, Name: {user.first_name}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f'pay_{order.id}')]]
        try:
            logger.info(f"Attempting to send notification to user {user.telegram_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ telegram_id –Ω–µ None
            if not user.telegram_id:
                raise ValueError("User telegram_id is None")
            
            notification_text = (
                f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –ø—Ä–∏–Ω—è—Ç!\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚ÇΩ\n"
                "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Äî –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ:"
            )
            
            logger.info(f"Sending message to user {user.telegram_id} with text: {notification_text}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(
                chat_id=user.telegram_id,
                text=notification_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            logger.info(f"Notification sent successfully to user {user.telegram_id}")
            
            # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            order.price = price
            session.commit()
            logger.info(f"Updated order #{order_id} with price {price}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await update.message.reply_text(
                f"‚úÖ –¶–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {price} ‚ÇΩ\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.",
                reply_markup=get_admin_keyboard()
            )
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            del context.user_data['current_order_id']
            logger.info(f"Cleared order #{order_id} from context")
            
        except Exception as e:
            logger.error(f"Error sending notification to user {user.telegram_id}: {str(e)}", exc_info=True)
            error_message = (
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
                f"–û—à–∏–±–∫–∞: {str(e)}\n"
                f"telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}"
            )
            await update.message.reply_text(
                error_message,
                reply_markup=get_admin_keyboard()
            )
            return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:"
        )
        return WAITING_PRICE
    except Exception as e:
        logger.error(f"Error setting price: {str(e)}", exc_info=True)
        session.rollback()
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã.\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_admin_keyboard()
        )
    
    return ConversationHandler.END

async def admin_reject_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Reject order."""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != context.bot_data['admin_id']:
        await query.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    order_id = int(query.data.split('_')[2])
    session = context.bot_data['db_session']
    
    try:
        order = session.query(Order).filter_by(id=order_id).first()
        if not order:
            await query.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END
        
        order.status = OrderStatus.CANCELLED
        session.commit()
        
        # Notify user
        user = session.query(User).filter_by(id=order.user_id).first()
        await context.bot.send_message(
            chat_id=user.telegram_id,
            text=f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω."
        )
        
        await query.message.reply_text(
            f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error rejecting order: {str(e)}", exc_info=True)
        session.rollback()
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_admin_keyboard()
        )
    
    return ConversationHandler.END

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show statistics."""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != context.bot_data['admin_id']:
        await query.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    session = context.bot_data['db_session']
    
    try:
        # Get total orders
        total_orders = session.query(Order).count()
        
        # Get orders by status
        orders_by_status = {}
        for status in OrderStatus:
            count = session.query(Order).filter_by(status=status).count()
            orders_by_status[status] = count
        
        # Get total users
        total_users = session.query(User).count()
        
        # Get total revenue
        total_revenue = session.query(Payment).filter_by(status=PaymentStatus.COMPLETED).with_entities(func.sum(Payment.amount)).scalar() or 0
        
        message = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} ‚ÇΩ\n\n"
            "üìà –ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
        )
        
        for status, count in orders_by_status.items():
            message += f"{ORDER_STATUS_MESSAGES[status]}: {count}\n"
        
        await query.message.reply_text(
            message,
            reply_markup=get_admin_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error getting stats: {str(e)}", exc_info=True)
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=get_admin_keyboard()
        )
    
    return ConversationHandler.END

async def admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start broadcast process."""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != context.bot_data['admin_id']:
        await query.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    await query.message.reply_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    )
    return WAITING_BROADCAST

async def handle_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle broadcast message."""
    if update.effective_user.id != context.bot_data['admin_id']:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    message = update.message.text
    session = context.bot_data['db_session']
    
    try:
        users = session.query(User).all()
        sent_count = 0
        failed_count = 0
        
        for user in users:
            try:
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text=message
                )
                sent_count += 1
            except Exception as e:
                logger.error(f"Error sending broadcast to user {user.telegram_id}: {str(e)}")
                failed_count += 1
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}",
            reply_markup=get_admin_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error during broadcast: {str(e)}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.",
            reply_markup=get_admin_keyboard()
        )
    
    return ConversationHandler.END

async def admin_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show reviews."""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != context.bot_data['admin_id']:
        await query.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    session = context.bot_data['db_session']
    
    try:
        reviews = session.query(Review).order_by(Review.created_at.desc()).all()
        
        if not reviews:
            await query.message.reply_text(
                "üì≠ –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=get_admin_keyboard()
            )
            return ConversationHandler.END
        
        for review in reviews:
            user = session.query(User).filter_by(id=review.user_id).first()
            message = (
                f"‚≠ê –û—Ç–∑—ã–≤ –æ—Ç {user.first_name} (@{user.username})\n"
                f"üìÖ {review.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù {review.text}\n"
                f"üí¨ –û—Ç–≤–µ—Ç: {review.admin_response or '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}"
            )
            
            keyboard = [[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'admin_review_response_{review.id}')]]
            await query.message.reply_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error getting reviews: {str(e)}", exc_info=True)
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.",
            reply_markup=get_admin_keyboard()
        )
    
    return ConversationHandler.END

async def admin_review_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start review response process."""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != context.bot_data['admin_id']:
        await query.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    review_id = int(query.data.split('_')[3])
    context.user_data['review_id'] = review_id
    
    await query.message.reply_text(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤:"
    )
    return WAITING_REVIEW_RESPONSE

async def handle_review_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle review response."""
    if update.effective_user.id != context.bot_data['admin_id']:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    if 'review_id' not in context.user_data:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –æ—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
        return ConversationHandler.END
    
    review_id = context.user_data['review_id']
    response = update.message.text
    session = context.bot_data['db_session']
    
    try:
        review = session.query(Review).filter_by(id=review_id).first()
        if not review:
            await update.message.reply_text(
                "‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_keyboard()
            )
            return ConversationHandler.END
        
        review.admin_response = response
        session.commit()
        
        # Notify user
        user = session.query(User).filter_by(id=review.user_id).first()
        await context.bot.send_message(
            chat_id=user.telegram_id,
            text=f"üí¨ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –æ—Ç–∑—ã–≤:\n\n{response}"
        )
        
        await update.message.reply_text(
            "‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error saving review response: {str(e)}", exc_info=True)
        session.rollback()
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=get_admin_keyboard()
        )
    
    return ConversationHandler.END

async def admin_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show messages."""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != context.bot_data['admin_id']:
        await query.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    session = context.bot_data['db_session']
    
    try:
        messages = session.query(Message).order_by(Message.created_at.desc()).all()
        
        if not messages:
            await query.message.reply_text(
                "üì≠ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=get_admin_keyboard()
            )
            return ConversationHandler.END
        
        for message in messages:
            user = session.query(User).filter_by(id=message.user_id).first()
            message_text = (
                f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (@{user.username})\n"
                f"üìÖ {message.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù {message.text}\n"
                f"üí¨ –û—Ç–≤–µ—Ç: {message.admin_response or '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}"
            )
            
            keyboard = [[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f'admin_message_response_{message.id}')]]
            await query.message.reply_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error getting messages: {str(e)}", exc_info=True)
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.",
            reply_markup=get_admin_keyboard()
        )
    
    return ConversationHandler.END

async def admin_message_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start message response process."""
    query = update.callback_query
    await query.answer()
    
    if update.effective_user.id != context.bot_data['admin_id']:
        await query.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    message_id = int(query.data.split('_')[3])
    context.user_data['message_id'] = message_id
    
    await query.message.reply_text(
        "üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    )
    return WAITING_USER_MESSAGE

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user message response."""
    if update.effective_user.id != context.bot_data['admin_id']:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END
    
    if 'message_id' not in context.user_data:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_admin_keyboard()
        )
        return ConversationHandler.END
    
    message_id = context.user_data['message_id']
    response = update.message.text
    session = context.bot_data['db_session']
    
    try:
        message = session.query(Message).filter_by(id=message_id).first()
        if not message:
            await update.message.reply_text(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_admin_keyboard()
            )
            return ConversationHandler.END
        
        message.admin_response = response
        session.commit()
        
        # Notify user
        user = session.query(User).filter_by(id=message.user_id).first()
        await context.bot.send_message(
            chat_id=user.telegram_id,
            text=f"üí¨ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{response}"
        )
        
        await update.message.reply_text(
            "‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error saving message response: {str(e)}", exc_info=True)
        session.rollback()
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=get_admin_keyboard()
        )
    
    return ConversationHandler.END 